02/20/2021:
    - Looked at code again
    - Setup Makefile and linked kernel
    - Learned some linker scripting
    - BASICALLY: COMPILATION STUFF

02/21/2021:
    - Looked at calling conventions:
        - SYSTEM-V-x86_64:
            1. Return: rax, rdx
            2. Parameter Registers: rdi, rsi, rdx, rcx, r8, r9
            3. Extra Parameters: stack (right to left)
            4. Stack Alignment: 16-byte at call
            5. Scratch Registers: rdi, rsi, rdx, rcx, r8, r9, r10, r11, rax
        - SYSTEM-V-i386:
            1. Return: eax, edx
            2. Parameter Registers: NONE
            3. Extra Parameters: stack (right to left)
            4. Stack Alignment: preferred 4 bytes, but not specified
            5. Scratch Registers: eax, edx, ecx
    - Implemented Wrapper Around IN/OUT instructions
    - Started Work on VGA Drvier
    - TODO:
        - Take notes on IN/OUT instructions
        - Take notes on VGA after completion
        - Review calling conventions
        - Take notes on paging
        - Start interrupt handlers

02/24/2021:
    - Worked on VGA Drvier
    - Found out kernel no workie and I think the error is possibly a page fault
    - RAX = CR2 = CR2=0x00000000800000ff

02/25/2021:
    - Got into kernel! - Error was that I used cat wrong to combine
    both the compiled kernel and the bootloader.
    - Worked more on VGA Drvier

03/01/2021:
    - Worked on VGA Driver: fixed bug on putc
    - TODO:
        - Take notes on IN/OUT instructions
        - Take notes on VGA after completion
        - Review calling conventions
        - Take notes on paging
        - Start interrupt handlers

03/02/2021:
    - Took some notes on VGA text mode
        - Differences between VGA, VBE, GOP, and VESA
        - Text mode stuff
    - TODO:
        - Look into framebuffers later

03/03/2021:
    - Did research on interrupts: read osdev wiki, AMD manual, and intel manual
    - Worked on IDT
    - TODO:
        - Implement interrupts
        - Test IDT
        - Take notes on interrupts
        - Look into ACPI to parse MADT to configure APIC
        - Look into configuring APIC later

03/04/2021:
    - Crappy interrupt bug. 0xdeadbeef one
    - You can call interrupts WITHOUT configuring APIC. You can use int, because the APIC
    is responsible with dealing with hardware interrupts. The "int" instruction is a "software" interrupt.
    Therefore, you need to configure APIC when dealing with external (hardware) interrupts, but you can test
    the IDT with the "int" instruction and triggering software interrupts.
    - Also, make sure to check for pointer decay. That was a crappy bug.

03/05/2021:
    - FIXED SHITTY INTERRUPT BUG
    - I literally love you ethan. Thank you so much man
    - TODO:
        - Look into position-independent code
        - Research gcc flags for osdev
            - -ffreestanding -Wall -Wextra -fno-stack-protector -fno-exceptions -fno-pic -mno-sse -mno-sse2 -mno-mmx -mno-80387 -mno-red-zone -gdwarf -fno-omit-frame-pointer
        - Work on memory manager

03/13/2021:
    - Read int 0x15, eax=0xe820 memory map and made pmm bitamp. Now, need to write pmm allocator and then start work on VMM.